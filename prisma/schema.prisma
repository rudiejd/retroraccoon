datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Retro {
  retroId     String        @id @default(cuid())
  title       String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String
  retroCard   RetroCard[]
  RetroColumn RetroColumn[]
}

model RetroCard {
  retroCardId              String      @id @default(cuid())
  body                     String
  createDate               DateTime    @default(now())
  updateDate               DateTime    @updatedAt
  retroColumn              RetroColumn @relation(fields: [retroColumnRetroColumnId], references: [retroColumnId])
  retroId                  String
  retro                    Retro       @relation(fields: [retroId], references: [retroId])
  retroColumnRetroColumnId String
}

model RetroColumn {
  retroColumnId String      @id @default(cuid())
  body          String
  createDate    DateTime    @default(now())
  updateDate    DateTime    @updatedAt
  retroId       String
  retro         Retro       @relation(fields: [retroId], references: [retroId])
  RetroCard     RetroCard[]
}

model User {
  id    String @id @default(cuid())
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?
  notes    Note[]
  Retro    Retro[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Note {
  id    String @id @default(cuid())
  title String
  body  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}
